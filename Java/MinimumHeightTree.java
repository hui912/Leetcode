import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.lang.Math;

public class MininumHeightTree {
	 private int[][] _initMap(int n, int[][] edges) {
		 int[][] map = new int[n][n];
		 
		 for (int i = 0; i < n; i++) {
			 for (int j = 0; j < 0; j++) {
				 map[i][j] = -1;
			 }
		 }
		 
		 for (int[] edge : edges) {
			 int i = edge[0];
			 int j = edge[1];		 
			 map[i][j] = 1;
			 map[j][i] = 1;
		 }
		 
		 return map;	 
	 }
	 
	 private List<V> _initVList (int n) {
		 List<V> vList = new ArrayList<V>();
		 
		 for (int i = 0; i < n; i++) {
			 vList.add(new V(i));
		 }
		 
		 return vList;
	 }
	
	 public List<Integer> findMinHeightTrees(int n, int[][] edges) {
		 List<Integer> MHT = new ArrayList<Integer>();
		 int[][] map = this._initMap(n, edges);
		 List<V> vList = this._initVList(n);
		 V root;
		 V vertice;
		 V child;
		 List<V> queue = new ArrayList<V>();
		 int minHeight;
		 
		 for (int i = 0; i < n; i++) {
			 //initialize the root
			 root = vList.get(i);
			 root.d = -1;
			 List<V> temp = new ArrayList<V>();
			 int row;
			 
			 queue.add(root);
			 
			 // traversing starts from the current root
			 while (queue.size() != 0) {
//				 for (V v : queue) {
//					 System.out.print(v.val + ", ");
//				 }
//				 System.out.println();
				 
				 if (temp.size() == 0) {
					 for (V v : queue) {
						 temp.add(v);
					 }
					 root.d++;
//					 System.out.println("vList[" + i + "].d = " + root.d);
				 }
				 
				 /**************************************
				  * pop the first vertice out of the queue
				  * mark the status of the vertice as visited
				  * assign the value of vertice to row as the starting point for traversal 
				  **************************************/
				 vertice = queue.get(0);
				 row = vertice.val;
				 vertice.visited = true;
				 queue.remove(0);
				 temp.remove(0);

				 for (int j = 0; j < n; j++) {
					 if (map[row][j] == 1 && j != root.val && vList.get(j).visited == false) {
						 queue.add(vList.get(j));
					 }
					 
				 }
				 
			 }
			 
			 // reset visited flag to false for all vertices
			 for (int idx = 0; idx < n; idx++) {
				 vList.get(idx).visited = false;
			 }
			
		 }
		 
//		 for (V v : vList) {
//			 System.out.print(v.d);
//		 }
		 
		 // calculate minimum height	 
		 minHeight = this.getMinHeight(vList);
		 
		 for (int idx = 0; idx < vList.size(); idx++) {
			 if (vList.get(idx).d == minHeight) {
				 MHT.add(idx);
			 }
		 }
		 
		 System.out.println(MHT);
		 return MHT;
	 }
	 
	 private int getMinHeight(List<V> vList) {
		 int minHeight = -1;
		 int[] dList = new int[vList.size()];
		 
		 for (int i = 0; i < vList.size(); i++) {
			 dList[i] = vList.get(i).d;
		 }
		 
		 Arrays.sort(dList);
		 minHeight = dList[0];
		 
		 return minHeight;
	 }
	 
	 public static void main(String[] args) {
		 //int n = 4;
		 //int n = 6;
		 int n = 399;
		 //int[][] edges = {{1, 0}, {1, 2}, {1, 3}};
		 //int[][] edges = {{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}};
		 int[][] edges = {{0,1},{0,2},{2,3},{3,4},{4,5},{1,6},{1,7},{5,8},{2,9},{7,10},{8,11},{8,12},{3,13},{6,14},{13,15},{4,16},{14,17},{14,18},{9,19},{12,20},{6,21},{14,22},{8,23},{20,24},{13,25},{21,26},{6,27},{15,28},{16,29},{27,30},{21,31},{9,32},{13,33},{15,34},{26,35},{19,36},{16,37},{14,38},{13,39},{11,40},{5,41},{7,42},{33,43},{19,44},{2,45},{26,46},{42,47},{21,48},{10,49},{18,50},{8,51},{19,52},{22,53},{47,54},{47,55},{19,56},{5,57},{49,58},{42,59},{13,60},{36,61},{22,62},{43,63},{2,64},{41,65},{32,66},{33,67},{64,68},{32,69},{26,70},{52,71},{52,72},{4,73},{29,74},{26,75},{5,76},{28,77},{29,78},{2,79},{63,80},{72,81},{62,82},{68,83},{33,84},{23,85},{17,86},{22,87},{22,88},{4,89},{41,90},{29,91},{31,92},{24,93},{1,94},{45,95},{60,96},{28,97},{46,98},{27,99},{32,100},{75,101},{2,102},{12,103},{67,104},{19,105},{96,106},{101,107},{17,108},{78,109},{18,110},{24,111},{95,112},{106,113},{102,114},{55,115},{78,116},{76,117},{91,118},{19,119},{89,120},{64,121},{49,122},{107,123},{18,124},{93,125},{79,126},{51,127},{97,128},{112,129},{82,130},{116,131},{4,132},{105,133},{104,134},{117,135},{19,136},{13,137},{134,138},{92,139},{111,140},{87,141},{36,142},{106,143},{91,144},{21,145},{127,146},{17,147},{58,148},{13,149},{88,150},{66,151},{136,152},{48,153},{104,154},{7,155},{97,156},{76,157},{36,158},{152,159},{116,160},{39,161},{130,162},{119,163},{162,164},{128,165},{57,166},{17,167},{25,168},{166,169},{31,170},{160,171},{16,172},{105,173},{24,174},{130,175},{133,176},{143,177},{41,178},{137,179},{10,180},{151,181},{22,182},{101,183},{86,184},{82,185},{42,186},{85,187},{96,188},{165,189},{73,190},{40,191},{95,192},{192,193},{93,194},{170,195},{168,196},{182,197},{176,198},{142,199},{169,200},{168,201},{1,202},{148,203},{35,204},{54,205},{132,206},{103,207},{2,208},{81,209},{161,210},{95,211},{133,212},{43,213},{63,214},{15,215},{185,216},{20,217},{161,218},{28,219},{196,220},{71,221},{92,222},{151,223},{207,224},{42,225},{31,226},{6,227},{33,228},{207,229},{29,230},{143,231},{231,232},{38,233},{62,234},{176,235},{4,236},{92,237},{32,238},{66,239},{6,240},{121,241},{116,242},{49,243},{224,244},{189,245},{28,246},{157,247},{115,248},{20,249},{239,250},{106,251},{172,252},{242,253},{48,254},{234,255},{140,256},{40,257},{157,258},{236,259},{198,260},{62,261},{179,262},{78,263},{22,264},{91,265},{254,266},{60,267},{243,268},{100,269},{207,270},{194,271},{84,272},{87,273},{166,274},{234,275},{133,276},{130,277},{23,278},{97,279},{169,280},{29,281},{232,282},{254,283},{168,284},{126,285},{284,286},{59,287},{77,288},{173,289},{79,290},{254,291},{273,292},{208,293},{288,294},{109,295},{139,296},{231,297},{91,298},{210,299},{81,300},{268,301},{225,302},{296,303},{241,304},{60,305},{90,306},{284,307},{130,308},{297,309},{218,310},{209,311},{70,312},{252,313},{188,314},{175,315},{172,316},{275,317},{313,318},{117,319},{291,320},{178,321},{11,322},{141,323},{173,324},{75,325},{165,326},{77,327},{106,328},{191,329},{217,330},{74,331},{129,332},{124,333},{242,334},{161,335},{289,336},{138,337},{101,338},{257,339},{162,340},{154,341},{110,342},{126,343},{152,344},{312,345},{317,346},{147,347},{145,348},{328,349},{314,350},{276,351},{238,352},{164,353},{161,354},{347,355},{158,356},{187,357},{325,358},{113,359},{207,360},{276,361},{92,362},{313,363},{147,364},{88,365},{307,366},{96,367},{328,368},{187,369},{99,370},{13,371},{262,372},{248,373},{247,374},{42,375},{9,376},{282,377},{35,378},{284,379},{338,380},{325,381},{100,382},{341,383},{274,384},{309,385},{297,386},{352,387},{273,388},{140,389},{257,390},{4,391},{366,392},{331,393},{158,394},{13,395},{112,396},{131,397},{12,398}};
		 
		 new MininumHeightTree().findMinHeightTrees(n, edges);
		 
	 }
}

class V {
	int d;
	int val;
	boolean visited;

	public V (int x) {
		this.d = -1;
		this.val = x;
		this.visited = false;
	}
}

